
/*
Given two Lists, find values in the first list that are not in the second list and return those values in a third list
*/

/*
The 2nd implementation tries to reduce the time complexity.
Itâ€™s similar to the 1st one, except that we first put the second list in a HashSet. This will get all the unique elements into the Set. Moverover, all the elements were hashed to a certain bucket. This will reduce the look-up operation time later. Hashset has a O(1) lookup time complexity (worst case O(n) ).
*/


package Collec;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class NotInSecond {
	
	public static void main(String[] args)
	{
		long startTime = System.nanoTime();

				//List<Integer> la= Arrays.asList(1,2,3);
				List<Integer> la= Arrays.asList
				List<Integer> lb= Arrays.asList

				//class name is not needed to call the static function within the class.
				List<Integer> result= notInSecondHash(la,lb);
			    if (result!=null && !result.isEmpty())
			    {
					System.out.println("the values in the 1st list that's not in the 2nd list");

					for (Integer e:result) {
						System.out.println(e);
					}
			    }	
			   else
			   {
					System.out.println("no values are found that's only in the 1st list.");
				}
		
				long endTime   = System.nanoTime();
				long totalTime = endTime - startTime;
				System.out.println(totalTime + "nanoTime");	    
			    
   }
	
	private static List<Integer> notInSecond(List<Integer> la, List<Integer> lb)
	{

		List<Integer> lc= new ArrayList<Integer>();
		
		if (la==null | lb==null){
			System.out.println("first or second list is null, please initialize them properly");
		}
		else{
				for (Integer e : la) {
					if (    ! ( lb.contains(e) )  ){
						lc.add(e);		
				    }
				}
		}
		return lc;
	}
	
	private static List<Integer> notInSecondHash (List<Integer> la, List<Integer> lb )
	{
		Set<Integer> s=new HashSet<Integer>(lb);
		List<Integer> lc=new ArrayList<Integer>();
		
		if (la==null | lb==null){
			System.out.println("first or second list is null, please initialize them properly");
		}
		else{
				for (Integer e : la) {
					if (    ! ( s.contains(e) )  ){
						lc.add(e);		
				    }
				}
		}
		
		return lc;
		
	}
	

}
